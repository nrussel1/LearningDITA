<?xml version="1.0" encoding="utf-8"?>
<!DOCTYPE learningContent PUBLIC "-//OASIS//DTD DITA Learning Content//EN" "learningContent.dtd">
<!-- This file is part of the DITA Training project hosted on      github.com. See the accompanying LICENSE file for      applicable licenses.-->
<learningContent id="content_pgf_3gt_qt">
    <title>Best practices for custom plugins</title>
    <prolog class="- topic/prolog ">
        <author type="creator" href="http://www.scriptorium.com" format="html" scope="external"
            class="- topic/author ">Gretyl Kinsey</author>
        <author type="contributor" href="http://www.scriptorium.com" format="html" scope="external"
            class="- topic/author ">Simon Bate</author>
        <author type="contributor" href="http://www.scriptorium.com" format="html" scope="external"
            class="- topic/author ">Jake Campbell</author>
        <author type="contributor" href="http://www.scriptorium.com" format="html" scope="external"
            class="- topic/author ">Noelle Russell</author>
        <author type="contributor" href="http://www.scriptorium.com" format="html" scope="external"
            class="- topic/author ">Ashley Stant</author>
        <critdates>
            <created golive="2017-03-06" date="2017-02-10"/>
        </critdates>
    </prolog>
    <learningContentbody>
        <lcInstruction>
            <p>If you use custom DITA plugins, eventually they will probably need to be updated or
                refreshed. You might need to make further updates to the appearance of your custom
                plugins’ output and test those changes. You may also need to add new custom plugins
                as your output requirements grow.</p>
            <p>Here are some best practices for maintaining custom DITA plugins:</p>
            <ul id="ul_jmj_42h_2z">
                <li>
                    <p><b>Establish a consistent way to collect specifications.</b> When you’re
                        developing a new custom plugin, you will need to gather specifications for
                        how the output should look. For print-based outputs such as PDF, these specs
                        typically include fonts, sizes, colors, page margins, rules for image and
                        table display, placement of running headers and footers, and so on. For
                        online formats such as HTML, these specs are also function-based; for
                        example, what kind of navigation and search will work best for your
                        audience?</p>
                    <p>Creating a custom plugin will be easier if you have a clear and consistent
                        method for gathering these specs. A good starting point is a checklist or
                        questionnaire that your company’s marketing department can answer to provide
                        specs about the look and feel of the output. Once you have these specs and
                        have created your first draft of the custom plugin, you will most likely
                        need several rounds of testing and review to fine-tune the output. The
                        better specs you have before you begin developing the plugin, the more
                        efficient the testing process will be.</p>
                </li>
                <li>
                    <p><b>Support special structures; don’t misuse structures.</b> A custom plugin
                        is a great way to ensure that a specialized DITA structure looks its best in
                        the various required output formats. However, custom plugins should not be
                        used to support “tag abuse” or purposeful misuse of the DITA structure,
                        standard or specialized. </p>
                    <p>For example, it may be tempting to create hundreds of outputclasses in the
                        DITA source to represent exceptions to the PDF styling, and hundreds of
                        matching rules in the custom PDF plugin to display those outputclasses.
                        However, this only makes your DITA source content and custom plugin more
                        complex and difficult to maintain. Adding lots of formatting overrides to
                        the source also defeats the purpose of separating content from formatting
                        for automation.</p>
                </li>
                <li>
                    <p><b>Document custom plugin updates.</b> When you need to make a change to the
                        custom plugin, add a comment with your name or company name, the date, and a
                        brief explanation of your update. Comment out what you’re changing in the
                        plugin rather than replacing it completely; you never know when you may be
                        asked to revert a change back to its original state. If you ever need to
                        transfer your custom plugins over to another developer, this will show them
                        all the changes to the plugin over time.</p>
                    <p>In addition to documenting changes, it can also be helpful to keep the specs
                        you gathered during plugin development as documentation. The result will be
                        a style guide you can use to ensure your output looks correct as you create
                        new DITA content and generate test output before final publication.</p>
                </li>
            </ul>
        </lcInstruction>
    </learningContentbody>
</learningContent>
